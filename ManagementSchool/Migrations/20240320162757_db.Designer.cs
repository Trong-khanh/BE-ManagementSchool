// <auto-generated />
using System;
using ManagementSchool.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManagementSchool.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240320162757_db")]
    partial class db
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ManagementSchool.Entities.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            ClassId = 101,
                            Name = "10/1",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 102,
                            Name = "10/2",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 103,
                            Name = "10/3",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 104,
                            Name = "10/4",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 105,
                            Name = "10/5",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 106,
                            Name = "10/6",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 107,
                            Name = "10/7",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 108,
                            Name = "10/8",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 109,
                            Name = "10/9",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 110,
                            Name = "10/10",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 111,
                            Name = "10/11",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 112,
                            Name = "10/12",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 113,
                            Name = "10/13",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 201,
                            Name = "11/1",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 202,
                            Name = "11/2",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 203,
                            Name = "11/3",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 204,
                            Name = "11/4",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 205,
                            Name = "11/5",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 206,
                            Name = "11/6",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 207,
                            Name = "11/7",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 208,
                            Name = "11/8",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 209,
                            Name = "11/9",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 210,
                            Name = "11/10",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 211,
                            Name = "11/11",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 212,
                            Name = "11/12",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 213,
                            Name = "11/13",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 301,
                            Name = "12/1",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 302,
                            Name = "12/2",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 303,
                            Name = "12/3",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 304,
                            Name = "12/4",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 305,
                            Name = "12/5",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 306,
                            Name = "12/6",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 307,
                            Name = "12/7",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 308,
                            Name = "12/8",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 309,
                            Name = "12/9",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 310,
                            Name = "12/10",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 311,
                            Name = "12/11",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 312,
                            Name = "12/12",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 313,
                            Name = "12/13",
                            SchoolYearId = 3
                        });
                });

            modelBuilder.Entity("ManagementSchool.Entities.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("ManagementSchool.Entities.SchoolYear", b =>
                {
                    b.Property<int>("SchoolYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolYearId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolYearId");

                    b.ToTable("SchoolYears");

                    b.HasData(
                        new
                        {
                            SchoolYearId = 1,
                            Name = "10"
                        },
                        new
                        {
                            SchoolYearId = 2,
                            Name = "11"
                        },
                        new
                        {
                            SchoolYearId = 3,
                            Name = "12"
                        });
                });

            modelBuilder.Entity("ManagementSchool.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ParentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ManagementSchool.Entities.TeacherClass", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("TeacherClasses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8d24dfa6-03cd-4fba-8fa4-1c0e5b8030b6",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ae21e73a-c83b-4e17-9c0d-11277ce746b3",
                            ConcurrencyStamp = "2",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "48449506-f170-438a-b432-2891124f96cc",
                            ConcurrencyStamp = "3",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "aeeae83e-b7f4-4d37-ad68-a92cb991a9a4",
                            ConcurrencyStamp = "4",
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManagementSchool.Entities.Class", b =>
                {
                    b.HasOne("ManagementSchool.Entities.SchoolYear", "SchoolYear")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Student", b =>
                {
                    b.HasOne("ManagementSchool.Entities.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementSchool.Entities.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ManagementSchool.Entities.TeacherClass", b =>
                {
                    b.HasOne("ManagementSchool.Entities.Class", "Class")
                        .WithMany("TeacherClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementSchool.Entities.Teacher", "Teacher")
                        .WithMany("TeacherClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagementSchool.Entities.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeacherClasses");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Parent", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ManagementSchool.Entities.SchoolYear", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Teacher", b =>
                {
                    b.Navigation("TeacherClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
