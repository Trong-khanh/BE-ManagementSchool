// <auto-generated />
using System;
using ManagementSchool.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManagementSchool.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240405032706_db")]
    partial class db
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ManagementSchool.Entities.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            ClassId = 101,
                            ClassName = "10/1",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 102,
                            ClassName = "10/2",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 103,
                            ClassName = "10/3",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 104,
                            ClassName = "10/4",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 105,
                            ClassName = "10/5",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 106,
                            ClassName = "10/6",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 107,
                            ClassName = "10/7",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 108,
                            ClassName = "10/8",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 109,
                            ClassName = "10/9",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 110,
                            ClassName = "10/10",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 111,
                            ClassName = "10/11",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 112,
                            ClassName = "10/12",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 113,
                            ClassName = "10/13",
                            SchoolYearId = 1
                        },
                        new
                        {
                            ClassId = 201,
                            ClassName = "11/1",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 202,
                            ClassName = "11/2",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 203,
                            ClassName = "11/3",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 204,
                            ClassName = "11/4",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 205,
                            ClassName = "11/5",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 206,
                            ClassName = "11/6",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 207,
                            ClassName = "11/7",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 208,
                            ClassName = "11/8",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 209,
                            ClassName = "11/9",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 210,
                            ClassName = "11/10",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 211,
                            ClassName = "11/11",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 212,
                            ClassName = "11/12",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 213,
                            ClassName = "11/13",
                            SchoolYearId = 2
                        },
                        new
                        {
                            ClassId = 301,
                            ClassName = "12/1",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 302,
                            ClassName = "12/2",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 303,
                            ClassName = "12/3",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 304,
                            ClassName = "12/4",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 305,
                            ClassName = "12/5",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 306,
                            ClassName = "12/6",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 307,
                            ClassName = "12/7",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 308,
                            ClassName = "12/8",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 309,
                            ClassName = "12/9",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 310,
                            ClassName = "12/10",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 311,
                            ClassName = "12/11",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 312,
                            ClassName = "12/12",
                            SchoolYearId = 3
                        },
                        new
                        {
                            ClassId = 313,
                            ClassName = "12/13",
                            SchoolYearId = 3
                        });
                });

            modelBuilder.Entity("ManagementSchool.Entities.ClassSemester", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ClassId", "SemesterId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassSemesters");
                });

            modelBuilder.Entity("ManagementSchool.Entities.ClassSubject", b =>
                {
                    b.Property<int>("ClassSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassSubjectId"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("ClassSubjectId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClassSubjects");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentId"), 1L, 1);

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("ManagementSchool.Entities.SchoolYear", b =>
                {
                    b.Property<int>("SchoolYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolYearId"), 1L, 1);

                    b.Property<string>("YearName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolYearId");

                    b.ToTable("SchoolYears");

                    b.HasData(
                        new
                        {
                            SchoolYearId = 1,
                            YearName = "10"
                        },
                        new
                        {
                            SchoolYearId = 2,
                            YearName = "11"
                        },
                        new
                        {
                            SchoolYearId = 3,
                            YearName = "12"
                        });
                });

            modelBuilder.Entity("ManagementSchool.Entities.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoreId"), 1L, 1);

                    b.Property<string>("SemesterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ScoreId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Semester", b =>
                {
                    b.Property<int>("SemesterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SemesterId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SemesterId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ParentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ManagementSchool.Entities.StudentSubject", b =>
                {
                    b.Property<int>("StudentSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentSubjectId"), 1L, 1);

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentSubjectId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudentSubjects");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"), 1L, 1);

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.HasIndex("StudentId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            SubjectName = "Math"
                        },
                        new
                        {
                            SubjectId = 2,
                            SubjectName = "Literature"
                        },
                        new
                        {
                            SubjectId = 3,
                            SubjectName = "English"
                        },
                        new
                        {
                            SubjectId = 4,
                            SubjectName = "Physics"
                        },
                        new
                        {
                            SubjectId = 5,
                            SubjectName = "Chemistry"
                        },
                        new
                        {
                            SubjectId = 6,
                            SubjectName = "Biology"
                        },
                        new
                        {
                            SubjectId = 7,
                            SubjectName = "History"
                        },
                        new
                        {
                            SubjectId = 8,
                            SubjectName = "Geography"
                        },
                        new
                        {
                            SubjectId = 9,
                            SubjectName = "Civics"
                        },
                        new
                        {
                            SubjectId = 10,
                            SubjectName = "Computer Science"
                        });
                });

            modelBuilder.Entity("ManagementSchool.Entities.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ManagementSchool.Entities.TeacherClass", b =>
                {
                    b.Property<int>("TeacherClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherClassId"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("TeacherClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherClasses");
                });

            modelBuilder.Entity("ManagementSchool.Service.RefreshToken.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "293d0d01-a719-462d-b39a-0041338a1f44",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "6a1da752-b64f-4f85-b33e-b45e9b1712f9",
                            ConcurrencyStamp = "2",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "761f7bc9-fc5a-4dde-9f61-03641f12d255",
                            ConcurrencyStamp = "3",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "7fe7cd9c-c336-487b-874c-92e3c090db37",
                            ConcurrencyStamp = "4",
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManagementSchool.Entities.Class", b =>
                {
                    b.HasOne("ManagementSchool.Entities.SchoolYear", "SchoolYear")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("ManagementSchool.Entities.ClassSemester", b =>
                {
                    b.HasOne("ManagementSchool.Entities.Class", "Class")
                        .WithMany("ClassSemesters")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementSchool.Entities.Semester", "Semester")
                        .WithMany("ClassSemesters")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementSchool.Entities.Student", null)
                        .WithMany("ClassSemesters")
                        .HasForeignKey("StudentId");

                    b.Navigation("Class");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("ManagementSchool.Entities.ClassSubject", b =>
                {
                    b.HasOne("ManagementSchool.Entities.Class", "Class")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementSchool.Entities.Subject", "Subject")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Score", b =>
                {
                    b.HasOne("ManagementSchool.Entities.Student", "Student")
                        .WithMany("Scores")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementSchool.Entities.Subject", "Subject")
                        .WithMany("Scores")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Student", b =>
                {
                    b.HasOne("ManagementSchool.Entities.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementSchool.Entities.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ManagementSchool.Entities.StudentSubject", b =>
                {
                    b.HasOne("ManagementSchool.Entities.Student", "Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementSchool.Entities.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Subject", b =>
                {
                    b.HasOne("ManagementSchool.Entities.Student", null)
                        .WithMany("Subjects")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Teacher", b =>
                {
                    b.HasOne("ManagementSchool.Entities.Subject", "Subject")
                        .WithMany("Teachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ManagementSchool.Entities.TeacherClass", b =>
                {
                    b.HasOne("ManagementSchool.Entities.Class", "Class")
                        .WithMany("TeacherClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementSchool.Entities.Teacher", "Teacher")
                        .WithMany("TeacherClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ManagementSchool.Service.RefreshToken.RefreshToken", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagementSchool.Entities.Class", b =>
                {
                    b.Navigation("ClassSemesters");

                    b.Navigation("ClassSubjects");

                    b.Navigation("Students");

                    b.Navigation("TeacherClasses");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Parent", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ManagementSchool.Entities.SchoolYear", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Semester", b =>
                {
                    b.Navigation("ClassSemesters");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Student", b =>
                {
                    b.Navigation("ClassSemesters");

                    b.Navigation("Scores");

                    b.Navigation("StudentSubjects");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Subject", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("Scores");

                    b.Navigation("StudentSubjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("ManagementSchool.Entities.Teacher", b =>
                {
                    b.Navigation("TeacherClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
